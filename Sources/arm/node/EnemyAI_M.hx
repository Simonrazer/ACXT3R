package arm.node;

@:keep class EnemyAI_M extends armory.logicnode.LogicTree {

	public function new() { super(); notifyOnAdd(add); }

	override public function add() {
		var _ApplyImpulse = new armory.logicnode.ApplyImpulseNode(this);
		var _Gate_001 = new armory.logicnode.GateNode(this);
		_Gate_001.property0 = "Greater";
		_Gate_001.property1 = 9.999999747378752e-05;
		var _OnUpdate = new armory.logicnode.OnUpdateNode(this);
		_OnUpdate.addOutputs([_Gate_001]);
		_Gate_001.addInput(_OnUpdate, 0);
		var _Time_001 = new armory.logicnode.TimeNode(this);
		var _Math_003 = new armory.logicnode.MathNode(this);
		_Math_003.property0 = "Add";
		_Math_003.property1 = "false";
		_Math_003.addInput(_Time_001, 0);
		var _Math_002 = new armory.logicnode.MathNode(this);
		_Math_002.property0 = "Divide";
		_Math_002.property1 = "false";
		_Math_002.addInput(new armory.logicnode.FloatNode(this, 1.0), 0);
		var _Random_Float__001 = new armory.logicnode.RandomFloatNode(this);
		_Random_Float__001.addInput(new armory.logicnode.FloatNode(this, 7.450580596923828e-09), 0);
		_Random_Float__001.addInput(new armory.logicnode.FloatNode(this, 0.30000001192092896), 0);
		_Random_Float__001.addOutputs([_Math_002]);
		_Math_002.addInput(_Random_Float__001, 0);
		_Math_002.addOutputs([_Math_003]);
		_Math_003.addInput(_Math_002, 0);
		var _SetVariable_001 = new armory.logicnode.SetVariableNode(this);
		_SetVariable_001.addInput(_Gate_001, 0);
		var _Float_002 = new armory.logicnode.FloatNode(this);
		_Float_002.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_Float_002.addOutputs([_SetVariable_001]);
		_SetVariable_001.addInput(_Float_002, 0);
		_SetVariable_001.addInput(_Math_003, 0);
		_SetVariable_001.addOutputs([new armory.logicnode.NullNode(this)]);
		_Math_003.addOutputs([_SetVariable_001]);
		_Time_001.addOutputs([_Math_003, _Gate_001]);
		_Time_001.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_Gate_001.addInput(_Time_001, 0);
		var _Random_Float_ = new armory.logicnode.RandomFloatNode(this);
		_Random_Float_.addInput(new armory.logicnode.FloatNode(this, -0.10000000149011612), 0);
		_Random_Float_.addInput(new armory.logicnode.FloatNode(this, 5.0), 0);
		_Random_Float_.addOutputs([_Gate_001]);
		_Gate_001.addInput(_Random_Float_, 0);
		_Gate_001.addOutputs([_SetVariable_001, _ApplyImpulse]);
		_Gate_001.addOutputs([new armory.logicnode.NullNode(this)]);
		_ApplyImpulse.addInput(_Gate_001, 0);
		var _Self = new armory.logicnode.SelfNode(this);
		var _SetVelocity = new armory.logicnode.SetVelocityNode(this);
		var _OnInit = new armory.logicnode.OnInitNode(this);
		_OnInit.addOutputs([_SetVelocity]);
		_SetVelocity.addInput(_OnInit, 0);
		_SetVelocity.addInput(_Self, 0);
		var _Random_Vector_ = new armory.logicnode.RandomVectorNode(this);
		_Random_Vector_.addInput(new armory.logicnode.VectorNode(this, -7.0, -25.0, 0.0), 0);
		_Random_Vector_.addInput(new armory.logicnode.VectorNode(this, 7.0, -5.0, 0.0), 0);
		_Random_Vector_.addOutputs([_SetVelocity]);
		_SetVelocity.addInput(_Random_Vector_, 0);
		_SetVelocity.addInput(new armory.logicnode.VectorNode(this, 1.0, 1.0, 1.0), 0);
		_SetVelocity.addInput(new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0), 0);
		_SetVelocity.addInput(new armory.logicnode.VectorNode(this, 1.0, 1.0, 1.0), 0);
		_SetVelocity.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetRotation = new armory.logicnode.SetRotationNode(this);
		var _OnUpdate_001 = new armory.logicnode.OnUpdateNode(this);
		_OnUpdate_001.addOutputs([_SetRotation]);
		_SetRotation.addInput(_OnUpdate_001, 0);
		_SetRotation.addInput(_Self, 0);
		var _Vector_001 = new armory.logicnode.VectorNode(this);
		_Vector_001.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		var _SeparateXYZ = new armory.logicnode.SeparateVectorNode(this);
		var _SeparateTransform = new armory.logicnode.SeparateTransformNode(this);
		var _GetTransform = new armory.logicnode.GetTransformNode(this);
		_GetTransform.addInput(_Self, 0);
		_GetTransform.addOutputs([_SeparateTransform]);
		_SeparateTransform.addInput(_GetTransform, 0);
		_SeparateTransform.addOutputs([new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0)]);
		_SeparateTransform.addOutputs([_SeparateXYZ]);
		_SeparateTransform.addOutputs([new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0)]);
		_SeparateXYZ.addInput(_SeparateTransform, 1);
		_SeparateXYZ.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_SeparateXYZ.addOutputs([_Vector_001]);
		_SeparateXYZ.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_Vector_001.addInput(_SeparateXYZ, 1);
		_Vector_001.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_Vector_001.addOutputs([_SetRotation]);
		_SetRotation.addInput(_Vector_001, 0);
		_SetRotation.addOutputs([new armory.logicnode.NullNode(this)]);
		_Self.addOutputs([_ApplyImpulse, _SetVelocity, _SetRotation, _GetTransform]);
		_ApplyImpulse.addInput(_Self, 0);
		var _Random_Vector__001 = new armory.logicnode.RandomVectorNode(this);
		_Random_Vector__001.addInput(new armory.logicnode.VectorNode(this, -10.0, -10.0, 0.0), 0);
		_Random_Vector__001.addInput(new armory.logicnode.VectorNode(this, 10.0, 1.0, 0.0), 0);
		_Random_Vector__001.addOutputs([_ApplyImpulse]);
		_ApplyImpulse.addInput(_Random_Vector__001, 0);
		_ApplyImpulse.addOutputs([new armory.logicnode.NullNode(this)]);
	}
}
