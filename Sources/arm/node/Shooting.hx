package arm.node;

@:keep class Shooting extends armory.logicnode.LogicTree {

	public function new() { super(); notifyOnAdd(add); }

	override public function add() {
		var _SetParent_001 = new armory.logicnode.SetParentNode(this);
		var _SpawnObject_001 = new armory.logicnode.SpawnObjectNode(this);
		var _Alternate = new armory.logicnode.AlternateNode(this);
		var _Gate_001 = new armory.logicnode.GateNode(this);
		_Gate_001.property0 = "Greater";
		_Gate_001.property1 = 9.999999747378752e-05;
		var _IsTrue = new armory.logicnode.IsTrueNode(this);
		var _OnKeyboard = new armory.logicnode.OnKeyboardNode(this);
		_OnKeyboard.property0 = "Down";
		_OnKeyboard.property1 = "space";
		_OnKeyboard.addOutputs([_IsTrue]);
		_IsTrue.addInput(_OnKeyboard, 0);
		var _ToBool = new armory.logicnode.ToBoolNode(this);
		var _Gate = new armory.logicnode.GateNode(this);
		_Gate.property0 = "Greater";
		_Gate.property1 = 9.999999747378752e-05;
		var _OnUpdate = new armory.logicnode.OnUpdateNode(this);
		_OnUpdate.addOutputs([_Gate]);
		_Gate.addInput(_OnUpdate, 0);
		var _GetProperty = new armory.logicnode.GetPropertyNode(this);
		var _GlobalObject = new armory.logicnode.GlobalObjectNode(this);
		_GlobalObject.addOutputs([_GetProperty]);
		_GetProperty.addInput(_GlobalObject, 0);
		_GetProperty.addInput(new armory.logicnode.StringNode(this, "HP"), 0);
		_GetProperty.addOutputs([_Gate]);
		_Gate.addInput(_GetProperty, 0);
		var _Float_002 = new armory.logicnode.FloatNode(this);
		_Float_002.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_Float_002.addOutputs([_Gate]);
		_Gate.addInput(_Float_002, 0);
		_Gate.addOutputs([_ToBool]);
		_Gate.addOutputs([new armory.logicnode.NullNode(this)]);
		_ToBool.addInput(_Gate, 0);
		_ToBool.addOutputs([_IsTrue]);
		_IsTrue.addInput(_ToBool, 0);
		_IsTrue.addOutputs([_Gate_001]);
		_Gate_001.addInput(_IsTrue, 0);
		var _Time = new armory.logicnode.TimeNode(this);
		var _Math = new armory.logicnode.MathNode(this);
		_Math.property0 = "Add";
		_Math.property1 = "false";
		_Math.addInput(_Time, 0);
		var _Math_001 = new armory.logicnode.MathNode(this);
		_Math_001.property0 = "Divide";
		_Math_001.property1 = "false";
		_Math_001.addInput(new armory.logicnode.FloatNode(this, 1.0), 0);
		var _Float_001 = new armory.logicnode.FloatNode(this);
		_Float_001.addInput(new armory.logicnode.FloatNode(this, 10.0), 0);
		_Float_001.addOutputs([_Math_001]);
		_Math_001.addInput(_Float_001, 0);
		_Math_001.addOutputs([_Math]);
		_Math.addInput(_Math_001, 0);
		var _SetVariable_001 = new armory.logicnode.SetVariableNode(this);
		_SetVariable_001.addInput(_Gate_001, 0);
		var _Float = new armory.logicnode.FloatNode(this);
		_Float.addInput(new armory.logicnode.FloatNode(this, 7.450580596923828e-09), 0);
		_Float.addOutputs([_SetVariable_001, _Gate_001]);
		_SetVariable_001.addInput(_Float, 0);
		_SetVariable_001.addInput(_Math, 0);
		_SetVariable_001.addOutputs([new armory.logicnode.NullNode(this)]);
		_Math.addOutputs([_SetVariable_001]);
		_Time.addOutputs([_Math, _Gate_001]);
		_Time.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_Gate_001.addInput(_Time, 0);
		_Gate_001.addInput(_Float, 0);
		_Gate_001.addOutputs([_SetVariable_001, _Alternate]);
		_Gate_001.addOutputs([new armory.logicnode.NullNode(this)]);
		_Alternate.addInput(_Gate_001, 0);
		var _SpawnObject = new armory.logicnode.SpawnObjectNode(this);
		_SpawnObject.addInput(_Alternate, 0);
		_SpawnObject.addInput(new armory.logicnode.ObjectNode(this, "PlayerLaser"), 0);
		var _GetTransform = new armory.logicnode.GetTransformNode(this);
		_GetTransform.addInput(new armory.logicnode.ObjectNode(this, "Gun_R"), 0);
		_GetTransform.addOutputs([_SpawnObject]);
		_SpawnObject.addInput(_GetTransform, 0);
		var _ApplyImpulse_001 = new armory.logicnode.ApplyImpulseNode(this);
		_ApplyImpulse_001.addInput(_SpawnObject, 0);
		_ApplyImpulse_001.addInput(_SpawnObject, 1);
		var _VectorMath_003 = new armory.logicnode.VectorMathNode(this);
		_VectorMath_003.property0 = "Multiply";
		var _VectorMath_004 = new armory.logicnode.VectorMathNode(this);
		_VectorMath_004.property0 = "Normalize";
		var _VectorMath_001 = new armory.logicnode.VectorMathNode(this);
		_VectorMath_001.property0 = "Add";
		var _GetLocation_001 = new armory.logicnode.GetLocationNode(this);
		_GetLocation_001.addInput(new armory.logicnode.ObjectNode(this, "Cursor"), 0);
		_GetLocation_001.addOutputs([_VectorMath_001]);
		_VectorMath_001.addInput(_GetLocation_001, 0);
		var _VectorMath_002 = new armory.logicnode.VectorMathNode(this);
		_VectorMath_002.property0 = "Multiply";
		var _GetLocation = new armory.logicnode.GetLocationNode(this);
		_GetLocation.addInput(new armory.logicnode.ObjectNode(this, "Jet"), 0);
		_GetLocation.addOutputs([_VectorMath_002]);
		_VectorMath_002.addInput(_GetLocation, 0);
		_VectorMath_002.addInput(new armory.logicnode.VectorNode(this, -1.0, -1.0, -1.0), 0);
		_VectorMath_002.addOutputs([_VectorMath_001]);
		_VectorMath_002.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_VectorMath_001.addInput(_VectorMath_002, 0);
		_VectorMath_001.addOutputs([_VectorMath_004]);
		_VectorMath_001.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_VectorMath_004.addInput(_VectorMath_001, 0);
		_VectorMath_004.addInput(new armory.logicnode.VectorNode(this, 1.0, 1.0, 1.0), 0);
		_VectorMath_004.addOutputs([_VectorMath_003]);
		_VectorMath_004.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_VectorMath_003.addInput(_VectorMath_004, 0);
		var _Vector_001 = new armory.logicnode.VectorNode(this);
		var _Integer = new armory.logicnode.IntegerNode(this);
		_Integer.addInput(new armory.logicnode.IntegerNode(this, 54), 0);
		_Integer.addOutputs([_Vector_001, _Vector_001, _Vector_001]);
		_Vector_001.addInput(_Integer, 0);
		_Vector_001.addInput(_Integer, 0);
		_Vector_001.addInput(_Integer, 0);
		_Vector_001.addOutputs([_VectorMath_003]);
		_VectorMath_003.addInput(_Vector_001, 0);
		var _ApplyImpulse = new armory.logicnode.ApplyImpulseNode(this);
		_ApplyImpulse.addInput(_SpawnObject_001, 0);
		_ApplyImpulse.addInput(_SpawnObject_001, 1);
		_ApplyImpulse.addInput(_VectorMath_003, 0);
		_ApplyImpulse.addOutputs([new armory.logicnode.NullNode(this)]);
		_VectorMath_003.addOutputs([_ApplyImpulse, _ApplyImpulse_001]);
		_VectorMath_003.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_ApplyImpulse_001.addInput(_VectorMath_003, 0);
		_ApplyImpulse_001.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetParent = new armory.logicnode.SetParentNode(this);
		_SetParent.addInput(_SpawnObject, 0);
		_SetParent.addInput(_SpawnObject, 1);
		_SetParent.addInput(new armory.logicnode.ObjectNode(this, "PlayerLasers"), 0);
		_SetParent.addOutputs([new armory.logicnode.NullNode(this)]);
		_SpawnObject.addOutputs([_ApplyImpulse_001, _SetParent]);
		_SpawnObject.addOutputs([_ApplyImpulse_001, _SetParent]);
		_Alternate.addOutputs([_SpawnObject]);
		_Alternate.addOutputs([_SpawnObject_001]);
		_SpawnObject_001.addInput(_Alternate, 1);
		_SpawnObject_001.addInput(new armory.logicnode.ObjectNode(this, "PlayerLaser"), 0);
		var _GetTransform_001 = new armory.logicnode.GetTransformNode(this);
		_GetTransform_001.addInput(new armory.logicnode.ObjectNode(this, "Gun_L"), 0);
		_GetTransform_001.addOutputs([_SpawnObject_001]);
		_SpawnObject_001.addInput(_GetTransform_001, 0);
		_SpawnObject_001.addOutputs([_ApplyImpulse, _SetParent_001]);
		_SpawnObject_001.addOutputs([_ApplyImpulse, _SetParent_001]);
		_SetParent_001.addInput(_SpawnObject_001, 0);
		_SetParent_001.addInput(_SpawnObject_001, 1);
		_SetParent_001.addInput(new armory.logicnode.ObjectNode(this, "PlayerLasers"), 0);
		_SetParent_001.addOutputs([new armory.logicnode.NullNode(this)]);
		var _VectorFromTransform = new armory.logicnode.VectorFromTransformNode(this);
		_VectorFromTransform.property0 = "Look";
		_VectorFromTransform.addInput(new armory.logicnode.NullNode(this), 0);
		_VectorFromTransform.addOutputs([new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0)]);
	}
}
